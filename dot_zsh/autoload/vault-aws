# -*- mode: sh -*-
source ~/.zsh/helpers.zsh
if [ ${#@} -gt 2 ];then _info "Usage:\n\tvault-aws <user> <account>\n\tvault-aws list" && return 1;fi
if [ -z ${VAULT_ADDR} ];then __error "Must export VAULT_ADDR" && return 1;fi
# Ensure we have required tools
if [ $+commands[jq] -ne 1 ];then __error "Missing jq cli" && return 1;fi
if [ $+commands[vault] -ne 1 ];then __error "Missing vault cli" && return 1;fi
if [ $+commands[aws] -ne 1 ];then __error "Missing aws cli" && return 1;fi
if [ $+commands[vault-token-helper] -ne 1 ];then __error "Missing vault-token-helper see: https://github.com/joemiller/vault-token-helper" && return 1;fi

local username=$1
function __vault_login(){
    if (nc -z ${VAULT_ADDR:8} 443 2>/dev/null);then
        vault login -method=ldap -no-print username=$username
        # TODO: check return code here and error if failed
    else
        __error "$VAULT_ADDR is unreachable" && return 1
    fi
}

__info "Using vault: $VAULT_ADDR"
if [[ $(vault-token-helper list --extended|grep -c ERROR) -gt 0 ]];then
    # Error making API request.
    __warn "Valid vault token not found, re-login as $username"
    __vault_login
else
    __info "Vault token valid"
fi

shift
local _account=$1
# json file containing mapping of short account names to paths:
# ex: { "name":"mountpath/creds/role" }
local vault_roles=~/.awsvault.json
local -A _accounts

if [[ -r $vault_roles ]];then
    jq -r 'keys[]' $vault_roles|while read k;do
        _accounts[$k]=$(jq -r ".$k" $vault_roles)
    done
elif [[ -z ${_accounts[(ie)$_account]} ]];then
    __error "Invalid account name: $_account" && return 1
else
    __error "Missing account map json file: $vault_roles" && return 1
fi

# Test if supplied account is in the array, retrieve creds, set env
if [[ ${_accounts[(ie)$_account]} -le ${#_accounts} ]];then
    local aws='\uF270'
    local vaultpath=${_accounts[$_account]}
    if [[ -z $vaultpath ]];then
        __error "Invalid path $vaultpath does $_account key exist?"
        __warn "Found paths for ${#_accounts} accounts:"
        jq -r 'keys[]' $vault_roles && return 1
    fi

    __info "$aws Requesting $_account credentials"
    __info "$aws Setting credentials in env: $vaultpath"
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_ACCOUNT_ID VAULT_LEASE_ID
    # switching between accounts is not easily supported, new long lived tokens
    # get generated with each invocation, need some kind of temp profile support
    # could base off of VAULT_LEAST_ID:
    # VAULT_LEASE_ID=jw-cd-lab-2/creds/bethel-adfs-awsorchestrationadmins2/AzaMC1YRMIn6EDOGDCoMJSjr
    # TODO read and export values from file (like envrc) if file exists and is new enough?
    local result=$(vault read -format=json $vaultpath)

    export VAULT_LEASE_ID=$(echo $result | jq -r '.lease_id')
    export AWS_ACCESS_KEY_ID=$(echo $result | jq -r '.data.access_key')
    export AWS_SECRET_ACCESS_KEY=$(echo $result | jq -r '.data.secret_key')
    if [[ -z "${AWS_REGION}" ]]; then export AWS_REGION='us-east-1'; fi

    # Useful for reference and ensures valid credentials when command returns
    export AWS_ACCOUNT_ID=$(until aws sts get-caller-identity --output text --query 'Account' 2>/dev/null; do :; done)
    # TODO write values to temp file?
else
    __error "Unknown account $account requested for user $username"
fi
